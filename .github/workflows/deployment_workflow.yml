name: "Git Actions - Terraform - Deployment Workflow"

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment environment'
        required: true
        default: 'Feature'
        options:
          - 'Feature' # feature branch and aws dev account
          - 'UAT' # dev branch and aws dev account
          - 'PROD'  # main branch and aws qa account
          - 'Release' # release branch and aws prod account
      # branch:
      #   description: 'Select branch or tag to deploy'
      #   required: true
      #   default: 'dev'
  push:
    branches:
      - 'feature**'
    paths:
      - '**.tf'
      - '**.json'
      - '**.py'
      
  pull_request:
    types:
      - closed
    paths-ignore:
      - '**.md'
      - '**.sh'
      - '**.drawio'
      - '**actions.yml'
      #- '**workflow.yml'
      - '**.bkp'
      - '.github\workflows\**'
    branches:
      - main
      - dev
      # - 'release/v[0-9].[0-9]'  release ÂàÜÊîØÂè™ËÉΩÊâãÂä®Ëß¶ÂèëÂèëÂ∏É


permissions:
      id-token: write # This is required for aws oidc connection
      contents: write # This is required for actions/checkout and wirte the output.tf
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Determine ref_branch
        id: set_ref_branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "ref_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "ref_branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ]; then 
            echo "ref_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Check if manually triggered
        id: manual_trigger
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "triggered=true" >> $GITHUB_OUTPUT
          else
            echo "triggered=false" >> $GITHUB_OUTPUT
          fi

      - name: Choose ENV by branch name
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref_name }}"
          if [ "${{ steps.manual_trigger.outputs.triggered }}" = "true" ]; then
            echo "env_name=${{ github.event.inputs.deploy_target }}" >> $GITHUB_OUTPUT
          elif [ "${{ steps.set_ref_branch.outputs.ref_branch }}" = "main" ]; then
            echo "env_name=PROD" >> $GITHUB_OUTPUT
          elif [ "${{ steps.set_ref_branch.outputs.ref_branch }}" = "dev" ]; then
            echo "env_name=UAT" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.set_ref_branch.outputs.ref_branch }}" == refs/tags/* ]]; then
            echo "env_name=Release" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.set_ref_branch.outputs.ref_branch }}" == feature* ]]; then
            echo "env_name=Feature" >> $GITHUB_OUTPUT
          else
            echo "env_name=Feature" >> $GITHUB_OUTPUT
          fi
            
      - name: Output ENV
        run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"

      - name: Output branch
        run: echo "I'm using variable ${{ steps.set_ref_branch.outputs.ref_branch }}"

    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
      ref_branch: ${{ steps.set_ref_branch.outputs.ref_branch }}

  checkout_code:
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" || ${{ github.event.pull_request.merged }} == true)
   
    name: "Checkout code from branch: ${{ needs.build.outputs.ref_branch }}"
    environment: ${{ github.event.inputs.deploy_target ||  needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.build.outputs.ref_branch }}
          submodules: true

  config_terraform_configuration:
    runs-on: ubuntu-latest
    needs: [checkout_code]
    if: |
      ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" || ${{ github.event.pull_request.merged }} == true)
   
    name: Automatically config terraform main configuration
    environment: ${{ github.event.inputs.deploy_target ||  needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Print directory structure
        run: find . -type d -o -type f

      - name: Dynamic set main configuration
        run: |
          python ./auto_config_main.py

  config_aws_credentials:
    runs-on: ubuntu-latest
    needs: [config_terraform_configuration]
    if: |
      ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" || ${{ github.event.pull_request.merged }} == true)
   
    name: Setup AWS credentials
    environment: ${{ github.event.inputs.deploy_target ||  needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-Actions-TERRAFORM


  setup_terraform:
    runs-on: ubuntu-latest
    needs: [config_aws_credentials]
    if: |
      ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" || ${{ github.event.pull_request.merged }} == true)
   
    name: Setup Terraform Version
    environment: ${{ github.event.inputs.deploy_target ||  needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_version: 1.5.3

  terraform_format:
    runs-on: ubuntu-latest
    needs: [setup_terraform]
    if: |
      ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" || ${{ github.event.pull_request.merged }} == true)
   
    name: Teraform format
    environment: ${{ github.event.inputs.deploy_target ||  needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

  terraform_init:
    runs-on: ubuntu-latest
    needs: [terraform_format]
    if: |
      ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" || ${{ github.event.pull_request.merged }} == true)
   
    name: Terraform init with S3 backend
    environment: ${{ github.event.inputs.deploy_target ||  needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Terraform Init
        id: init
        run: terraform init -lock-timeout=600s -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME }}" -backend-config="key=${{ secrets.AWS_BUCKET_KEY_NAME }}" -backend-config="region=${{ secrets.AWS_REGION }}"

  terraform_validate:
    runs-on: ubuntu-latest
    needs: [terraform_init]
    if: |
      ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" || ${{ github.event.pull_request.merged }} == true)
   
    name: Terraform validate
    environment: ${{ github.event.inputs.deploy_target ||  needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

  terraform_plan:
    runs-on: ubuntu-latest
    needs: [terraform_validate]
    if: |
      ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" || ${{ github.event.pull_request.merged }} == true)
   
    name: Terraform plan
    environment: ${{ github.event.inputs.deploy_target ||  needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
#        run: terraform plan -no-color -var="bucket=${AWS_BUCKET_NAME}" -var="key=${AWS_BUCKET_KEY_NAME}" -var="region=${AWS_REGION}"
        # if: github.event_name == 'pull_request'
        continue-on-error: true

  write_pull_requests_log:
    runs-on: ubuntu-latest
    needs: [terraform_plan]
    if: |
      ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" || ${{ github.event.pull_request.merged }} == true)
   
    name: Write pull requests log
    environment: ${{ github.event.inputs.deploy_target ||  needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform_plan_status:
    runs-on: ubuntu-latest
    needs: [terraform_plan]
    if: |
      ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" || ${{ github.event.pull_request.merged }} == true)
   
    name: Terraform plan
    environment: ${{ github.event.inputs.deploy_target ||  needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform_apply:
    runs-on: ubuntu-latest
    needs: [terraform_plan_status]
    if: |
      ${{ github.event_name }} == "push" || ${{ github.event_name }} == "workflow_dispatch" || ${{ github.event.pull_request.merged }} == true)
   
    name: Terraform apply
    environment: ${{ github.event.inputs.deploy_target ||  needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Terraform Apply to default account
        # if: github.event_name == 'pull_request'
        run: terraform apply -auto-approve
#        run: terraform apply -auto-approve -var="bucket=${AWS_BUCKET_NAME}" -var="key=${AWS_BUCKET_KEY_NAME}" -var="region=${AWS_REGION}"
