name: "Git Actions - Terraform - Deployment Workflow"

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment environment'
        required: true
        default: 'DEV'
        options:
          - 'DEV' # dev branch and aws dev account
          - 'QA'  # main branch and aws qa account
          - 'PROD' # release branch and aws prod account
      branch:
        description: 'Select branch or tag to deploy'
        required: true
        default: 'dev'

  push:
    paths-ignore:
      - '**.md'
      - '**.drawio'
      - '**actions.yml'
      - '**.bkp'
      - '.github\workflows\**'
    branches:
      - dev

  pull_request:
    paths-ignore:
      - '**.md'
      - '**.drawio'
      - '**actions.yml'
      - '**.bkp'
      - '.github\workflows\**'
    branches:
      - main
      - dev
      - 'release/v[0-9].[0-9]'


permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Check if manually triggered
        id: manual_trigger
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "::set-output name=triggered::true"
          else
            echo "::set-output name=triggered::false"
          fi

      - name: Choose ENV by branch name
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ steps.manual_trigger.outputs.triggered }}" = "true" ]; then
            echo "::set-output name=env_name::${{ github.event.inputs.deploy_target }}"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "::set-output name=env_name::QA"
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "::set-output name=env_name::DEV"
          elif [[ ${{ github.ref }} == refs/tags/* ]]; then
            echo "::set-output name=env_name::PROD"
          else
            echo "::set-output name=env_name::FEATURE"
          fi
            
      - name: Use variable setup in previous step
        run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"
        
    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
    
  deploy:
    needs: [build]
    if: |
      "${{ github.event_name }}" == "workflow_dispatch" || github.ref == 'refs/heads/dev' || (github.event_name == 'pull_request_review' && github.event.review.state == 'approved')
   
    name: Deploy services to AWS
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.deploy_target || needs.build.outputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-Actions-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        # if: github.event_name == 'pull_request'
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply to default account
        # if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: terraform apply -auto-approve -input=false